// visualcpp.cpp : définit le point d'entrée pour l'application console.
//

#include "stdafx.h"
#include <string.h>
#include <tchar.h>
#include <regex>
#include <iostream>

#include "cryptopp\aes.h"
#include "cryptopp\modes.h"
#include "cryptopp\filters.h"
#include "cryptopp\osrng.h"

using namespace CryptoPP;

void test_aes() {
    // Use a fixed key (replace this with your actual key)
    byte key[ AES::DEFAULT_KEYLENGTH ] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                          0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

    byte plaintext[] = "Hello, AES!";
    byte ciphertext[1024];
    byte recoveredtext[11];

    // AES encryption
    CFB_Mode<AES>::Encryption cfbEncryption(key, sizeof(key), 0);

    StringSource(plaintext, sizeof(plaintext) - 1, true,
                 new StreamTransformationFilter(cfbEncryption,
                                                new ArraySink(ciphertext, sizeof(ciphertext))));

    // Display the ciphertext
    std::cout << "Ciphertext: " << ciphertext << std::endl;
    std::cout << "-------" << std::endl;

    // AES decryption
    CFB_Mode<AES>::Decryption cfbDecryption(key, sizeof(key), 0);

    StringSource(ciphertext, sizeof(ciphertext), true,
                 new StreamTransformationFilter(cfbDecryption,
                                                new ArraySink(recoveredtext, sizeof(recoveredtext))));

    // Display the recovered text
    std::cout << "Recovered text: " << recoveredtext << std::endl;
}

void print_osef(std::string str) {
	std::cout << str << "\n";
}

void print_osef2(std::string str) {
	std::cout << str << "\n";
}

int main(int argc, char * argv[])
{
	// First check : only two args (cmds + arg)
    if (argc != 2) {
		std::cout << "undefined 1" << "\n";
        return 1;
    }

	std::string str = argv[1];

	// Second check, key must be less than 32 chars
	if (str.length() > 32) {
		std::cout << "undefined 2" << "\n";
		return 2;
	}

	std::regex pattern("[a-fA-F0-9]+");

	// Key must be hex
	if (!std::regex_match(argv[1], pattern)) {
		std::cout << "undefined 3" << "\n";
		return 3;
	}

	// A2 == a2 (osef de la casse tavu)
	std::transform(str.begin(), str.end(), str.begin(), ::toupper);

	test_aes();

	print_osef(str);

	return 0;
}
