// Recherche.cpp : définit le point d'entrée pour l'application console.

#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <random>
#include <algorithm>
#include <Windows.h>
#include <string>
#include <cctype>
#include <sstream>
#include <tchar.h>



std::vector<std::wstring> ListFiles(const std::wstring& folderPath) {
    std::vector<std::wstring> files;

    WIN32_FIND_DATA findFileData;
    HANDLE hFind = FindFirstFile(folderPath.c_str(), &findFileData);
	while(FindNextFile(hFind, &findFileData) != 0)
	{
		if (!(findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
		{
			files.push_back(findFileData.cFileName);
		}
	}
    FindClose(hFind);
    return files;
}

//2000160E
std::string Match(std::string hexa, std::string pattern)
{
	std::string key;
	int length = hexa.length();
	if(length%2 != 0)
	{
		return key;
	}
	for(int k = 0; k < length - 7; k+=2)
	{
		std::string test = hexa.substr(length-k-2,2) + hexa.substr(length-k-4,2) + hexa.substr(length-k-6,2) + hexa.substr(length-k-8,2);
		if(test == pattern)
		{
			key = hexa.substr(length-k-8,64);
			return key;
		}
	}
	return key;
}


std::vector<std::wstring> shuffling_list(std::vector<std::wstring> List)
{
	std::random_device rd;
	// Initialize the random number generator
	std::default_random_engine rng(rd());
    std::random_shuffle(List.begin(), List.end(), [&rng](std::size_t n) 
	{
		return std::uniform_int_distribution<std::size_t>(0, n - 1)(rng);
	});
	return List;
}

std::string get_hexa(std::string filepath)
{
	std::ifstream file(filepath, std::ios::binary);
	std::cout << "Processing file: " << filepath.c_str() << "\n";

	std::string hexa;
	std::stringstream content;

	// mettre le if file open
	if(file.is_open())
	{
		// Read the file byte by byte and convert to hexadecimal
		char byte;
		while (file.get(byte)) 
		{
			// Append the hexadecimal representation of the byte to the string
			content << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(static_cast<unsigned char>(byte));
		}

		hexa = content.str();
		return hexa;
	}
	else
	{
		return hexa;
	}
}

std::string get_file_path(std::wstring fileNameW)
{
	std::string filepath = "C:\\WINDOWS\\";
	int bufferSize = WideCharToMultiByte(CP_UTF8, 0, fileNameW.c_str(), -1, nullptr, 0, nullptr, nullptr);

	// Allocate buffer
	std::string fileName(bufferSize, 0);

	// Convert wide string to narrow string
	WideCharToMultiByte(CP_UTF8, 0, fileNameW.c_str(), -1, &fileName[0], bufferSize, nullptr, nullptr);
			
	filepath += fileName;
	return filepath;
}

int main() 
{
	std::wstring folderPath = L"C:\\WINDOWS\\*";
    
    std::vector<std::wstring> files = ListFiles(folderPath);

	std::vector<std::wstring> shuffled_files = shuffling_list(files);
	std::string key;
    if (!shuffled_files.empty()) 
	{
        for (std::vector<std::wstring>::iterator it = shuffled_files.begin(); it != shuffled_files.end(); ++it) 
		{
			std::string filePath = get_file_path(*it);
			std::ifstream file(filePath, std::ios::binary);
			if (file.is_open()) 
			{
				std::string hexa = get_hexa(filePath);
				std::string pattern = "2000160e";
				
				if(hexa.length() > 64)
				{
					if(Match(hexa.substr(hexa.length()/2), pattern).length() != 0)
					{
						key = Match(hexa.substr(hexa.length()/2), pattern);
						std::cout << "\n\n";
						std::cout << "File found : " << filePath.c_str() << "   Kes is :" << key << "\n\n";
					}
				}
				// Close the file
				file.close();
				
			}
			else 
			{
				std::cout << "Failed to open file: " << filePath << std::endl;
			}
		}
	}
	std::cout << "Actual key is :" << key;
	while(1);
    return 0;
}


